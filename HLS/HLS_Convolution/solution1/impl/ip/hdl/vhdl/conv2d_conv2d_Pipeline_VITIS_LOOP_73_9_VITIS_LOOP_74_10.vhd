-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_conv2d_Pipeline_VITIS_LOOP_73_9_VITIS_LOOP_74_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_image_x_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_image_x_ce0 : OUT STD_LOGIC;
    out_image_x_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    out_image_y_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_image_y_ce0 : OUT STD_LOGIC;
    out_image_y_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    out_image_sobel_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_image_sobel_ce0 : OUT STD_LOGIC;
    out_image_sobel_we0 : OUT STD_LOGIC;
    out_image_sobel_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of conv2d_conv2d_Pipeline_VITIS_LOOP_73_9_VITIS_LOOP_74_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3E04 : STD_LOGIC_VECTOR (13 downto 0) := "11111000000100";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln73_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln74_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_138_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln73_reg_307 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln73_reg_307_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln73_1_fu_160_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln73_1_reg_313 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln75_fu_209_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln75_reg_319 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_2_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_2_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_2_reg_324_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln75_reg_339 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln76_fu_224_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln76_reg_344 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln77_fu_228_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln77_reg_349 : STD_LOGIC_VECTOR (11 downto 0);
    signal abscond_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln77_1_fu_240_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln77_1_reg_359 : STD_LOGIC_VECTOR (11 downto 0);
    signal abscond3_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond3_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_48 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln74_fu_167_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_52 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal indvar_flatten13_fu_56 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln73_1_fu_123_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (13 downto 0);
    signal out_image_x_ce0_local : STD_LOGIC;
    signal out_image_y_ce0_local : STD_LOGIC;
    signal out_image_sobel_we0_local : STD_LOGIC;
    signal add_ln77_fu_270_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_image_sobel_ce0_local : STD_LOGIC;
    signal add_ln73_fu_154_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_182_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_fu_196_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln75_fu_200_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_1_fu_206_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln75_fu_220_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln76_fu_224_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond_fu_234_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond3_fu_246_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln77_fu_252_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln77_1_fu_261_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln77_1_fu_266_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln77_fu_257_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv2d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_52 <= select_ln73_1_fu_160_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln73_fu_117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_56 <= add_ln73_1_fu_123_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_56 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_48 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_48 <= add_ln74_fu_167_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                abscond3_reg_364 <= abscond3_fu_246_p2;
                abscond_reg_354 <= abscond_fu_234_p2;
                add_ln75_reg_319 <= add_ln75_fu_209_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                sext_ln75_reg_339 <= sext_ln75_fu_220_p1;
                sext_ln76_reg_344 <= sext_ln76_fu_224_p1;
                sub_ln77_1_reg_359 <= sub_ln77_1_fu_240_p2;
                sub_ln77_reg_349 <= sub_ln77_fu_228_p2;
                    zext_ln75_2_reg_324(13 downto 0) <= zext_ln75_2_fu_215_p1(13 downto 0);
                    zext_ln75_2_reg_324_pp0_iter4_reg(13 downto 0) <= zext_ln75_2_reg_324(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln74_reg_302 <= icmp_ln74_fu_132_p2;
                select_ln73_1_reg_313 <= select_ln73_1_fu_160_p3;
                select_ln73_reg_307 <= select_ln73_fu_138_p3;
                select_ln73_reg_307_pp0_iter1_reg <= select_ln73_reg_307;
            end if;
        end if;
    end process;
    zext_ln75_2_reg_324(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln75_2_reg_324_pp0_iter4_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abscond3_fu_246_p0 <= out_image_y_q0;
    abscond3_fu_246_p2 <= "1" when (signed(abscond3_fu_246_p0) > signed(ap_const_lv11_0)) else "0";
    abscond_fu_234_p0 <= out_image_x_q0;
    abscond_fu_234_p2 <= "1" when (signed(abscond_fu_234_p0) > signed(ap_const_lv11_0)) else "0";
    add_ln73_1_fu_123_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv14_1));
    add_ln73_fu_154_p2 <= std_logic_vector(unsigned(i_fu_52) + unsigned(ap_const_lv7_1));
    add_ln74_fu_167_p2 <= std_logic_vector(unsigned(select_ln73_reg_307) + unsigned(ap_const_lv7_1));
    add_ln75_fu_209_p2 <= std_logic_vector(unsigned(sub_ln75_fu_200_p2) + unsigned(zext_ln75_1_fu_206_p1));
    add_ln77_fu_270_p2 <= std_logic_vector(signed(sext_ln77_1_fu_266_p1) + signed(sext_ln77_fu_257_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln73_fu_117_p2)
    begin
        if (((icmp_ln73_fu_117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, j_fu_48, add_ln74_fu_167_p2, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_j_load <= ap_const_lv7_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_j_load <= add_ln74_fu_167_p2;
            else 
                ap_sig_allocacmp_j_load <= j_fu_48;
            end if;
        else 
            ap_sig_allocacmp_j_load <= j_fu_48;
        end if; 
    end process;

    icmp_ln73_fu_117_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv14_3E04) else "0";
    icmp_ln74_fu_132_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_7E) else "0";
    out_image_sobel_address0 <= zext_ln75_2_reg_324_pp0_iter4_reg(14 - 1 downto 0);
    out_image_sobel_ce0 <= out_image_sobel_ce0_local;

    out_image_sobel_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_image_sobel_ce0_local <= ap_const_logic_1;
        else 
            out_image_sobel_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_image_sobel_d0 <= add_ln77_fu_270_p2;
    out_image_sobel_we0 <= out_image_sobel_we0_local;

    out_image_sobel_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_image_sobel_we0_local <= ap_const_logic_1;
        else 
            out_image_sobel_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_image_x_address0 <= zext_ln75_2_fu_215_p1(14 - 1 downto 0);
    out_image_x_ce0 <= out_image_x_ce0_local;

    out_image_x_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_image_x_ce0_local <= ap_const_logic_1;
        else 
            out_image_x_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_image_y_address0 <= zext_ln75_2_fu_215_p1(14 - 1 downto 0);
    out_image_y_ce0 <= out_image_y_ce0_local;

    out_image_y_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_image_y_ce0_local <= ap_const_logic_1;
        else 
            out_image_y_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_182_p3 <= (select_ln73_1_reg_313 & ap_const_lv7_0);
    select_ln73_1_fu_160_p3 <= 
        add_ln73_fu_154_p2 when (icmp_ln74_reg_302(0) = '1') else 
        i_fu_52;
    select_ln73_fu_138_p3 <= 
        ap_const_lv7_0 when (icmp_ln74_fu_132_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln77_1_fu_261_p3 <= 
        sext_ln76_reg_344 when (abscond3_reg_364(0) = '1') else 
        sub_ln77_1_reg_359;
    select_ln77_fu_252_p3 <= 
        sext_ln75_reg_339 when (abscond_reg_354(0) = '1') else 
        sub_ln77_reg_349;
    sext_ln75_fu_220_p0 <= out_image_x_q0;
        sext_ln75_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_fu_220_p0),12));

    sext_ln76_fu_224_p0 <= out_image_y_q0;
        sext_ln76_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_fu_224_p0),12));

        sext_ln77_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln77_1_fu_261_p3),13));

        sext_ln77_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln77_fu_252_p3),13));

    sub_ln75_fu_200_p2 <= std_logic_vector(unsigned(p_shl_fu_182_p3) - unsigned(zext_ln75_fu_196_p1));
    sub_ln77_1_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln76_fu_224_p1));
    sub_ln77_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln75_fu_220_p1));
    tmp_fu_189_p3 <= (select_ln73_1_reg_313 & ap_const_lv1_0);
    zext_ln75_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_reg_307_pp0_iter1_reg),14));
    zext_ln75_2_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_reg_319),64));
    zext_ln75_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_189_p3),14));
end behav;
