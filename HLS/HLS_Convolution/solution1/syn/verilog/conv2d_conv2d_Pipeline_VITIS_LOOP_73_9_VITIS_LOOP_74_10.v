// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2d_conv2d_Pipeline_VITIS_LOOP_73_9_VITIS_LOOP_74_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_image_x_address0,
        out_image_x_ce0,
        out_image_x_q0,
        out_image_y_address0,
        out_image_y_ce0,
        out_image_y_q0,
        out_image_sobel_address0,
        out_image_sobel_ce0,
        out_image_sobel_we0,
        out_image_sobel_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] out_image_x_address0;
output   out_image_x_ce0;
input  [10:0] out_image_x_q0;
output  [13:0] out_image_y_address0;
output   out_image_y_ce0;
input  [10:0] out_image_y_q0;
output  [13:0] out_image_sobel_address0;
output   out_image_sobel_ce0;
output   out_image_sobel_we0;
output  [12:0] out_image_sobel_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln73_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln74_fu_132_p2;
reg   [0:0] icmp_ln74_reg_302;
wire   [6:0] select_ln73_fu_138_p3;
reg   [6:0] select_ln73_reg_307;
reg   [6:0] select_ln73_reg_307_pp0_iter1_reg;
wire   [6:0] select_ln73_1_fu_160_p3;
reg   [6:0] select_ln73_1_reg_313;
wire   [13:0] add_ln75_fu_209_p2;
reg   [13:0] add_ln75_reg_319;
wire   [63:0] zext_ln75_2_fu_215_p1;
reg   [63:0] zext_ln75_2_reg_324;
reg   [63:0] zext_ln75_2_reg_324_pp0_iter4_reg;
wire  signed [11:0] sext_ln75_fu_220_p1;
reg  signed [11:0] sext_ln75_reg_339;
wire  signed [11:0] sext_ln76_fu_224_p1;
reg  signed [11:0] sext_ln76_reg_344;
wire   [11:0] sub_ln77_fu_228_p2;
reg   [11:0] sub_ln77_reg_349;
wire   [0:0] abscond_fu_234_p2;
reg   [0:0] abscond_reg_354;
wire   [11:0] sub_ln77_1_fu_240_p2;
reg   [11:0] sub_ln77_1_reg_359;
wire   [0:0] abscond3_fu_246_p2;
reg   [0:0] abscond3_reg_364;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_48;
wire   [6:0] add_ln74_fu_167_p2;
reg   [6:0] ap_sig_allocacmp_j_load;
wire    ap_loop_init;
reg   [6:0] i_fu_52;
reg   [13:0] indvar_flatten13_fu_56;
wire   [13:0] add_ln73_1_fu_123_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten13_load;
reg    out_image_x_ce0_local;
reg    out_image_y_ce0_local;
reg    out_image_sobel_we0_local;
wire   [12:0] add_ln77_fu_270_p2;
reg    out_image_sobel_ce0_local;
wire   [6:0] add_ln73_fu_154_p2;
wire   [7:0] tmp_fu_189_p3;
wire   [13:0] p_shl_fu_182_p3;
wire   [13:0] zext_ln75_fu_196_p1;
wire   [13:0] sub_ln75_fu_200_p2;
wire   [13:0] zext_ln75_1_fu_206_p1;
wire  signed [10:0] sext_ln75_fu_220_p0;
wire  signed [10:0] sext_ln76_fu_224_p0;
wire  signed [10:0] abscond_fu_234_p0;
wire  signed [10:0] abscond3_fu_246_p0;
wire   [11:0] select_ln77_fu_252_p3;
wire   [11:0] select_ln77_1_fu_261_p3;
wire  signed [12:0] sext_ln77_1_fu_266_p1;
wire  signed [12:0] sext_ln77_fu_257_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 j_fu_48 = 7'd0;
#0 i_fu_52 = 7'd0;
#0 indvar_flatten13_fu_56 = 14'd0;
#0 ap_done_reg = 1'b0;
end

conv2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_52 <= select_ln73_1_fu_160_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_117_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_56 <= add_ln73_1_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_56 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_48 <= add_ln74_fu_167_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        abscond3_reg_364 <= abscond3_fu_246_p2;
        abscond_reg_354 <= abscond_fu_234_p2;
        add_ln75_reg_319 <= add_ln75_fu_209_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        sext_ln75_reg_339 <= sext_ln75_fu_220_p1;
        sext_ln76_reg_344 <= sext_ln76_fu_224_p1;
        sub_ln77_1_reg_359 <= sub_ln77_1_fu_240_p2;
        sub_ln77_reg_349 <= sub_ln77_fu_228_p2;
        zext_ln75_2_reg_324[13 : 0] <= zext_ln75_2_fu_215_p1[13 : 0];
        zext_ln75_2_reg_324_pp0_iter4_reg[13 : 0] <= zext_ln75_2_reg_324[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln74_reg_302 <= icmp_ln74_fu_132_p2;
        select_ln73_1_reg_313 <= select_ln73_1_fu_160_p3;
        select_ln73_reg_307 <= select_ln73_fu_138_p3;
        select_ln73_reg_307_pp0_iter1_reg <= select_ln73_reg_307;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_117_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_j_load = 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_j_load = add_ln74_fu_167_p2;
        end else begin
            ap_sig_allocacmp_j_load = j_fu_48;
        end
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_image_sobel_ce0_local = 1'b1;
    end else begin
        out_image_sobel_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_image_sobel_we0_local = 1'b1;
    end else begin
        out_image_sobel_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_image_x_ce0_local = 1'b1;
    end else begin
        out_image_x_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_image_y_ce0_local = 1'b1;
    end else begin
        out_image_y_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abscond3_fu_246_p0 = out_image_y_q0;

assign abscond3_fu_246_p2 = (($signed(abscond3_fu_246_p0) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_234_p0 = out_image_x_q0;

assign abscond_fu_234_p2 = (($signed(abscond_fu_234_p0) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign add_ln73_1_fu_123_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 14'd1);

assign add_ln73_fu_154_p2 = (i_fu_52 + 7'd1);

assign add_ln74_fu_167_p2 = (select_ln73_reg_307 + 7'd1);

assign add_ln75_fu_209_p2 = (sub_ln75_fu_200_p2 + zext_ln75_1_fu_206_p1);

assign add_ln77_fu_270_p2 = ($signed(sext_ln77_1_fu_266_p1) + $signed(sext_ln77_fu_257_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln73_fu_117_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 14'd15876) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_132_p2 = ((ap_sig_allocacmp_j_load == 7'd126) ? 1'b1 : 1'b0);

assign out_image_sobel_address0 = zext_ln75_2_reg_324_pp0_iter4_reg;

assign out_image_sobel_ce0 = out_image_sobel_ce0_local;

assign out_image_sobel_d0 = add_ln77_fu_270_p2;

assign out_image_sobel_we0 = out_image_sobel_we0_local;

assign out_image_x_address0 = zext_ln75_2_fu_215_p1;

assign out_image_x_ce0 = out_image_x_ce0_local;

assign out_image_y_address0 = zext_ln75_2_fu_215_p1;

assign out_image_y_ce0 = out_image_y_ce0_local;

assign p_shl_fu_182_p3 = {{select_ln73_1_reg_313}, {7'd0}};

assign select_ln73_1_fu_160_p3 = ((icmp_ln74_reg_302[0:0] == 1'b1) ? add_ln73_fu_154_p2 : i_fu_52);

assign select_ln73_fu_138_p3 = ((icmp_ln74_fu_132_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign select_ln77_1_fu_261_p3 = ((abscond3_reg_364[0:0] == 1'b1) ? sext_ln76_reg_344 : sub_ln77_1_reg_359);

assign select_ln77_fu_252_p3 = ((abscond_reg_354[0:0] == 1'b1) ? sext_ln75_reg_339 : sub_ln77_reg_349);

assign sext_ln75_fu_220_p0 = out_image_x_q0;

assign sext_ln75_fu_220_p1 = sext_ln75_fu_220_p0;

assign sext_ln76_fu_224_p0 = out_image_y_q0;

assign sext_ln76_fu_224_p1 = sext_ln76_fu_224_p0;

assign sext_ln77_1_fu_266_p1 = $signed(select_ln77_1_fu_261_p3);

assign sext_ln77_fu_257_p1 = $signed(select_ln77_fu_252_p3);

assign sub_ln75_fu_200_p2 = (p_shl_fu_182_p3 - zext_ln75_fu_196_p1);

assign sub_ln77_1_fu_240_p2 = ($signed(12'd0) - $signed(sext_ln76_fu_224_p1));

assign sub_ln77_fu_228_p2 = ($signed(12'd0) - $signed(sext_ln75_fu_220_p1));

assign tmp_fu_189_p3 = {{select_ln73_1_reg_313}, {1'd0}};

assign zext_ln75_1_fu_206_p1 = select_ln73_reg_307_pp0_iter1_reg;

assign zext_ln75_2_fu_215_p1 = add_ln75_reg_319;

assign zext_ln75_fu_196_p1 = tmp_fu_189_p3;

always @ (posedge ap_clk) begin
    zext_ln75_2_reg_324[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln75_2_reg_324_pp0_iter4_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //conv2d_conv2d_Pipeline_VITIS_LOOP_73_9_VITIS_LOOP_74_10
