// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2d_conv2d_Pipeline_VITIS_LOOP_85_11_VITIS_LOOP_87_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_image_sobel_address0,
        out_image_sobel_ce0,
        out_image_sobel_q0,
        max_val_2_out,
        max_val_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] out_image_sobel_address0;
output   out_image_sobel_ce0;
input  [12:0] out_image_sobel_q0;
output  [15:0] max_val_2_out;
output   max_val_2_out_ap_vld;

reg ap_idle;
reg max_val_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_271;
reg   [0:0] icmp_ln85_reg_271_pp0_iter1_reg;
reg   [0:0] icmp_ln85_reg_271_pp0_iter2_reg;
reg   [0:0] icmp_ln85_reg_271_pp0_iter3_reg;
wire   [0:0] icmp_ln87_fu_122_p2;
reg   [0:0] icmp_ln87_reg_275;
wire   [7:0] select_ln82_fu_128_p3;
reg   [7:0] select_ln82_reg_280;
reg   [7:0] select_ln82_reg_280_pp0_iter1_reg;
wire   [7:0] select_ln85_fu_150_p3;
reg   [7:0] select_ln85_reg_286;
wire   [6:0] trunc_ln89_fu_157_p1;
reg   [6:0] trunc_ln89_reg_291;
wire   [13:0] add_ln89_fu_203_p2;
reg   [13:0] add_ln89_reg_296;
reg   [12:0] out_image_sobel_load_reg_306;
wire   [63:0] zext_ln89_2_fu_209_p1;
wire    ap_block_pp0_stage0;
reg   [15:0] max_val_fu_48;
wire   [15:0] max_val_2_fu_225_p3;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [7:0] col_fu_52;
wire   [7:0] add_ln87_fu_161_p2;
reg   [7:0] ap_sig_allocacmp_col_load;
reg   [7:0] row_fu_56;
reg   [14:0] indvar_flatten20_fu_60;
wire   [14:0] add_ln85_1_fu_113_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten20_load;
wire    ap_block_pp0_stage0_01001;
reg    out_image_sobel_ce0_local;
wire   [7:0] add_ln85_fu_144_p2;
wire   [8:0] tmp_fu_176_p3;
wire   [13:0] tmp_2_fu_183_p3;
wire   [13:0] zext_ln89_fu_190_p1;
wire   [13:0] sub_ln87_fu_194_p2;
wire   [13:0] zext_ln89_1_fu_200_p1;
wire  signed [15:0] sext_ln89_fu_216_p1;
wire   [0:0] icmp_ln89_fu_219_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 max_val_fu_48 = 16'd0;
#0 col_fu_52 = 8'd0;
#0 row_fu_56 = 8'd0;
#0 indvar_flatten20_fu_60 = 15'd0;
#0 ap_done_reg = 1'b0;
end

conv2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            col_fu_52 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            col_fu_52 <= add_ln87_fu_161_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten20_fu_60 <= add_ln85_1_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_60 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            max_val_fu_48 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            max_val_fu_48 <= max_val_2_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_56 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            row_fu_56 <= select_ln85_fu_150_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln89_reg_296 <= add_ln89_fu_203_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln85_reg_271_pp0_iter2_reg <= icmp_ln85_reg_271_pp0_iter1_reg;
        icmp_ln85_reg_271_pp0_iter3_reg <= icmp_ln85_reg_271_pp0_iter2_reg;
        out_image_sobel_load_reg_306 <= out_image_sobel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_271 <= icmp_ln85_fu_107_p2;
        icmp_ln85_reg_271_pp0_iter1_reg <= icmp_ln85_reg_271;
        icmp_ln87_reg_275 <= icmp_ln87_fu_122_p2;
        select_ln82_reg_280 <= select_ln82_fu_128_p3;
        select_ln82_reg_280_pp0_iter1_reg <= select_ln82_reg_280;
        select_ln85_reg_286 <= select_ln85_fu_150_p3;
        trunc_ln89_reg_291 <= trunc_ln89_fu_157_p1;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_col_load = 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_col_load = add_ln87_fu_161_p2;
        end else begin
            ap_sig_allocacmp_col_load = col_fu_52;
        end
    end else begin
        ap_sig_allocacmp_col_load = col_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_271_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        max_val_2_out_ap_vld = 1'b1;
    end else begin
        max_val_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_image_sobel_ce0_local = 1'b1;
    end else begin
        out_image_sobel_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_1_fu_113_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 15'd1);

assign add_ln85_fu_144_p2 = (row_fu_56 + 8'd1);

assign add_ln87_fu_161_p2 = (select_ln82_reg_280 + 8'd1);

assign add_ln89_fu_203_p2 = (sub_ln87_fu_194_p2 + zext_ln89_1_fu_200_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln85_fu_107_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_122_p2 = ((ap_sig_allocacmp_col_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_219_p2 = ((sext_ln89_fu_216_p1 > max_val_fu_48) ? 1'b1 : 1'b0);

assign max_val_2_fu_225_p3 = ((icmp_ln89_fu_219_p2[0:0] == 1'b1) ? sext_ln89_fu_216_p1 : max_val_fu_48);

assign max_val_2_out = max_val_fu_48;

assign out_image_sobel_address0 = zext_ln89_2_fu_209_p1;

assign out_image_sobel_ce0 = out_image_sobel_ce0_local;

assign select_ln82_fu_128_p3 = ((icmp_ln87_fu_122_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_col_load);

assign select_ln85_fu_150_p3 = ((icmp_ln87_reg_275[0:0] == 1'b1) ? add_ln85_fu_144_p2 : row_fu_56);

assign sext_ln89_fu_216_p1 = $signed(out_image_sobel_load_reg_306);

assign sub_ln87_fu_194_p2 = (tmp_2_fu_183_p3 - zext_ln89_fu_190_p1);

assign tmp_2_fu_183_p3 = {{trunc_ln89_reg_291}, {7'd0}};

assign tmp_fu_176_p3 = {{select_ln85_reg_286}, {1'd0}};

assign trunc_ln89_fu_157_p1 = select_ln85_fu_150_p3[6:0];

assign zext_ln89_1_fu_200_p1 = select_ln82_reg_280_pp0_iter1_reg;

assign zext_ln89_2_fu_209_p1 = add_ln89_reg_296;

assign zext_ln89_fu_190_p1 = tmp_fu_176_p3;

endmodule //conv2d_conv2d_Pipeline_VITIS_LOOP_85_11_VITIS_LOOP_87_12
